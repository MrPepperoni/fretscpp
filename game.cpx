uses includes, utils, font, sprites, globals, MainMenu, scene, audio;

void drawglstuff()
{
	//printf("%d\n",(int) scn.time);
	glBindTexture(GL_TEXTURE_2D,NULL);
	//glBegin( GL_TRIANGLES );
	//...glVertex3f( 600, 400, 0 );
	//glEnd();
	//a.displayString("Elena",300,200,60+50*sin(time),TFont::ALIGN_CENTER | TFont::ALIGN_VONETHIRD);
	glTranslatef(0,0,0);
	MainMenu.render();
	scn.time=gettimenow();
	if (((int) scn.time)%10==8) 
	{
		scn.fade=scn.time-floor(scn.time);
		scn.timestartsc=gettimenow();
		scn.menufade=0;
	}
	else if (((int) scn.time)%10==9) 
	{
		scn.fade=1;
		scn.menufade=scn.time-floor(scn.time);
		scn.timestartsc=gettimenow();
	}
	else if (((int) scn.time)%10==0) 
	{
		scn.fade=1;
		scn.menufade=1-(scn.time-floor(scn.time));
		scn.timestartsc=gettimenow();
		scn.timesc=0;
	}
	else if (((int) scn.time)%10==1) 
	{
		scn.menufade=0;
		scn.fade=1-(scn.time-floor(scn.time));
		scn.timestartsc=gettimenow();
		scn.timesc=0;
	}
	else {
		scn.fade=0;
		scn.menufade=0;
		scn.timesc=gettimenow()-scn.timestartsc;
	}
	audio_yield();
}

int main( int argc, char* argv[] )
{
	assume(!SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO), "Unable to initialize SDL: %s\n");
	// SDL_GetError());
	init_fonts();
	SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );
	
	SDL_WM_SetCaption("Frets-on-fire-CPP", "SDL");
	/* create window */
	SDL_Surface* screen = SDL_SetVideoMode(globals.scr_width, globals.scr_height, 0, SDL_OPENGL);

	glEnable( GL_TEXTURE_2D );
	glEnable (GL_BLEND); 
	glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	//glBlendFunc (GL_BLEND_DST_ALPHA ,GL_SRC_ALPHA);
	deffont.open("data/default.ttf");
	init_sprites();
	init_audio();
	load_effects("data/menu.ogg");
	song_start("data/songs/tutorial/");
	audio_yield();
	if (0) {
		int q;
		for (q=0; q<90000; q++) printf("%09d %d %d %d %d %d %d\n",q,
			playing.buffer[0][q],
			playing.buffer[1][q],
			playing.buffer[2][q],
			playing.buffer[3][q],
			playing.buffer[4][q],
			playing.buffer[5][q]
					      );
	}
	MainMenu.init();
	glViewport( 0, 0, 800, 600 );
	glClear( GL_COLOR_BUFFER_BIT );
	glMatrixMode( GL_PROJECTION );
	glLoadIdentity();
	glOrtho(0.0f, 800, 600, 0.0f, -1.0f, 1.0f);
	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity();
	glEnable(GL_POLYGON_SMOOTH);
	glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST);

	/* load bitmap to temp surface */
	//SDL_Surface* temp = SDL_LoadBMP("sdl_logo.bmp");
	/* convert bitmap to display format */
	//SDL_Surface* bg = SDL_DisplayFormat(temp);
	/* free the temp surface */
	//SDL_FreeSurface(temp);

	SDL_Event event;
	int gameover = 0;

	/* message pump */
	while (!gameover)
	{
		/* look for an event */
		if (SDL_PollEvent(&event)) {
			/* an event was found */
			switch (event.type) {
				/* close button clicked */
				case SDL_QUIT:
					gameover = 1;
					break;

				/* handle the keyboard */
				case SDL_KEYDOWN:
					switch (event.key.keysym.sym) {
						case SDLK_ESCAPE:
						case SDLK_q:
							gameover = 1;
							break;
					}
					break;
			}
		}

		/* draw the background */
		//SDL_BlitSurface(bg, NULL, screen, NULL);
		/* update the screen */
		//SDL_UpdateRect(screen, 0, 0, 0, 0);
		
		drawglstuff();
		SDL_GL_SwapBuffers();
	}

	/* free the background surface */
	//SDL_FreeSurface(bg);

	/* cleanup SDL */
	SDL_Quit();
	//printf("CBK=%d F:%d Fo:%d chn:%d buf%d\n",
	//	callbacklen,desired.format, obtained.format, obtained.channels, obtained.samples);
	return 0;
}

