/*******************************************************************
(C) 2010 by Radu Stefan
radu124@gmail.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*******************************************************************/  
  
uses includes, utils, font, sprites, globals, scnMainMenu, scnGuitar, scnKeydef, scene, audio, midiparser, verbosity, joystick;

void drawglstuff()
{
	//DBG(GL,"%d\n" &((int) scn.time));
	renderscene();
	audio_yield();
}

void doResize(int w, int h)
{
	scr_width=w;
	scr_height=h;
	SDL_Surface *ns;
	ns=SDL_SetVideoMode(scr_width, scr_height, 0, SDL_OPENGL | SDL_RESIZABLE);
	glViewport( 0, 0, scr_width, scr_height );
	scene_setOrtho();
	MESSAGE("RESIZE: %d %d\n" &scr_width &scr_height);
}

int main( int argc, char* argv[] )
{
	init_config();
	assume(!SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO), "Unable to initialize SDL: %s\n");
	// SDL_GetError());
	init_fonts();
	SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );
	
	SDL_WM_SetCaption("Frets-on-fire-CPP", "SDL");
	/* create window */
	SDL_Surface* screen = SDL_SetVideoMode(scr_width, scr_height, 0, SDL_OPENGL | SDL_RESIZABLE);
	glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxTexSize);
	INFO(SPRITES,"Maximum texture size:%d\n" &maxTexSize);
	init_joysticks();
	glEnable( GL_TEXTURE_2D );
	glEnable (GL_BLEND); 
	glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	//glAlphaFunc(GL_GREATER,0.1);
	//glEnable(GL_ALPHA_TEST);
	
	//glBlendFunc (GL_BLEND_DST_ALPHA ,GL_SRC_ALPHA);
	deffont.open(datadir+"/default.ttf");
	init_sprites();
	init_audio();
	load_effects(datadir+"/fiba1.ogg");
	load_effects(datadir+"/fiba2.ogg");
	load_effects(datadir+"/fiba5.ogg");
	load_effects(datadir+"/fiba6.ogg");
	song_start(datadir+"/menu.ogg");
	audio_yield();
	if (0) {
		int q;
		for (q=0; q<90000; q++) DBG(AUDIO,"%09d %d %d %d %d %d %d\n" &q
			&playing.buffer[0][q]
			&playing.buffer[1][q]
			&playing.buffer[2][q]
			&playing.buffer[3][q]
			&playing.buffer[4][q]
			&playing.buffer[5][q]
					      );
	}
	MainMenu.init();
	scores.init();
	glViewport( 0, 0, scr_width, scr_height );
	glClear( GL_COLOR_BUFFER_BIT );
	scene_setOrtho();
	glEnable(GL_POLYGON_SMOOTH);
	glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST);

	/* load bitmap to temp surface */
	//SDL_Surface* temp = SDL_LoadBMP("sdl_logo.bmp");
	/* convert bitmap to display format */
	//SDL_Surface* bg = SDL_DisplayFormat(temp);
	/* free the temp surface */
	//SDL_FreeSurface(temp);

	SDL_Event event;
	gameover = 0;

	/* message pump */
	while (!gameover)
	{
		/* look for an event */
		while (SDL_PollEvent(&event)) {
			/* an event was found */
			if (event.type==SDL_QUIT)
				gameover=1;
			else if (event.type==SDL_VIDEORESIZE)
			{
				doResize(event.resize.w,event.resize.h);
			}
			else
				translateandhandleevent(event);
				
			switch (event.type) {
				/* close button clicked */
				case SDL_QUIT:
					gameover = 1;
					break;
			}
		}

		/* draw the background */
		//SDL_BlitSurface(bg, NULL, screen, NULL);
		/* update the screen */
		//SDL_UpdateRect(screen, 0, 0, 0, 0);
		drawglstuff();
		if (video_glflush) glFlush();
		if (video_glfinish) glFinish();
		SDL_GL_SwapBuffers();
	}

	/* free the background surface */
	//SDL_FreeSurface(bg);

	/* cleanup SDL */
	config_write();
	done_joysticks();
	SDL_Quit();
	//DBG(GAME,"CBK=%d F:%d Fo:%d chn:%d buf%d\n",
	//	callbacklen,desired.format, obtained.format, obtained.channels, obtained.samples);
	return 0;
}

