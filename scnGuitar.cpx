interface

class tSceneGuitar:public tScnMenuBase
{
public:
	tSceneGuitar() { scenes.add(this,SCN_PLAYING); };
	GLfloat fadespeed() { return 1000; }
	GLfloat boardlen,boardline,necktop;
	int timenow;
	int cplayer;
	int cinstrument;
	int cdifficulty;
	vector<notestatus> *cnotes;
	void enter();
	void init();
	void render();
	void handleevent(SDL_Event &a);
	void renderNeck();
	void renderTracks();
	void renderBars();
	void renderKey(int num, int position);
	void renderKeys();
	int renderNote(int col, int ts, int flags=0);
	void renderNotes();
	void renderNoteLines();
	void renderNoteLine(int col, GLfloat from, GLfloat to, int flags);
	void renderFrets();
	void renderStats();
	void renderFlame(int col, GLfloat sz);
	void renderFlames();
	void noteRegion();
	void origGlow(int n);
	void rfFlame(int n, GLfloat sz);
	int menumode;
	void itemClicked(int i);
	GLfloat notePos(int timestamp);
} guitarScene;

GLfloat keycolors[5][3]={
	0.0f, 1.0f, 0.0f, 
	1.0f, 0.0f, 0.0f, 
	1.0f, 1.0f, 0.0f, 
	0.0f, 0.0f, 1.0f, 
	1.0f, 0.0f, 1.0f 
	};

implementation

uses audio,player,globals,sgFlames,sgNeck,sgNotes,sgKeys;

void tSceneGuitar::render()
{
	glClearColor( 0.3f, 0.0f, 0.0f, 0.0f );
	glClear( GL_COLOR_BUFFER_BIT );	
	timenow=playing.playpos;
	for (cplayer=0; cplayer<1; cplayer++)
	{
		cinstrument=player[cplayer].instrument;
		cdifficulty=player[cplayer].difficulty;
		cnotes=&crtSong.trk_notes[cinstrument];
		scene_setNeck(cplayer);
		noteRegion();
		renderNeck();
		renderTracks();
		renderNoteLines();
		renderKeys();
		renderNotes();
		renderFlames();
		scene_setOrtho();
	}
	
	renderStats();
	if (menumode)
	{
		glLoadIdentity();
		glBindTexture(GL_TEXTURE_2D,NULL);
		glBegin(GL_TRIANGLE_FAN);
		glColor4f(0.0f,0.0f,0.0f,0.30f);
		glVertex3f(0,0,0);
		glVertex3f(globals::scr_width,0,0);
		glVertex3f(globals::scr_width,globals::scr_height,0);
		glVertex3f(0,globals::scr_height,0);
		glEnd();
		glLoadIdentity();
		rendertext();
	}
}

void tSceneGuitar::enter()
{
	int i;
	tScnMenuBase::enter();
	SDL_EnableKeyRepeat(0,0);
	for (i=0; i<globals::numplayers; i++) player[i].init(i);
	menumode=0;
	song_start((globals::selectedsong+"/").c_str());
}

void tSceneGuitar::init()
{
	INFO(SCNGUITAR,"Init guitar scene\n");
	additem("Return to Song");
	additem("Restart Song");
	additem("Change Song");
	additem("Settings");
	additem("Quit to Main Menu");
	menumode=1;
	posx=globals::scr_width*0.2;
	posy=globals::scr_height*0.4;
	scale=globals::scr_height*0.04;
	tScnMenuBase::init();
	viewOffset=0;
	viewSize=5;
	
	boardlen=4;
	boardline=3;
	necktop=2;
}

void tSceneGuitar::renderStats()
{
	char a[32];
	player[0].passtime();
	sprintf(a,"%d %s",player[0].streak,player[0].dbg.c_str());
	glLoadIdentity();
	glColor4f(1.0,1.0,1.0,1.0);
	deffont.displayString(a,20,20,20,0);
}

void tSceneGuitar::handleevent(SDL_Event &a)
{
	if (a.type==SDL_KEYDOWN &&
		a.key.keysym.sym==SDLK_ESCAPE &&
		menumode==0)
	{
		menumode=1;
		playing.pause=1;
		return;
	} 
	
	if (menumode) tScnMenuBase::handleevent(a);
	else {
		if (a.type==SDL_KEYDOWN) switch (a.key.keysym.sym)
		{
			case SDLK_F1: player[0].lastkeys[0]=1; player[0].hitactive=0; break;
			case SDLK_F2: player[0].lastkeys[1]=1; player[0].hitactive=0; break;
			case SDLK_F3: player[0].lastkeys[2]=1; player[0].hitactive=0; break;
			case SDLK_F4: player[0].lastkeys[3]=1; player[0].hitactive=0; break;
			case SDLK_F5: player[0].lastkeys[4]=1; player[0].hitactive=0; break;
			case SDLK_RETURN: player[0].lastkeys[5]=1; player[0].handlehit(); break;
			case SDLK_RSHIFT: player[0].lastkeys[5]=1; player[0].handlehit(); break;
		}
		if (a.type==SDL_KEYUP) switch (a.key.keysym.sym)
		{
			case SDLK_F1: player[0].lastkeys[0]=0; player[0].hitactive=0; break;
			case SDLK_F2: player[0].lastkeys[1]=0; player[0].hitactive=0; break;
			case SDLK_F3: player[0].lastkeys[2]=0; player[0].hitactive=0; break;
			case SDLK_F4: player[0].lastkeys[3]=0; player[0].hitactive=0; break;
			case SDLK_F5: player[0].lastkeys[4]=0; player[0].hitactive=0; break;
			case SDLK_RETURN: player[0].lastkeys[5]=0; break;
			case SDLK_RSHIFT: player[0].lastkeys[5]=0; break;
		}
	}
}

void tSceneGuitar::itemClicked(int i)
{
	switch (i)
	{
	case -1:
	case 0: // return
		menumode=0;
		playing.pause=0;
		return;
	case 1: // restart
		return;
	case 2: // change song
		fadetoscene(SCN_SONGS);
		return;
	case 3: // settings
		return;
	case 4: // main menu
		fadetoscene(SCN_MAINMENU);
		return;
	}
}




