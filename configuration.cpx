interface

uses includes;

string configFile;

namespace config
{
	vvint keys;
	vstring kcname;
	
	// bit mask describing the last selected input devices
	long keyselector[2];
}

void init_config();

implementation

int defkeys[]={ SDLK_F1, SDLK_F2, SDLK_F3, SDLK_F4, SDLK_F5, SDLK_RETURN, SDLK_RSHIFT, SDLK_TAB };
int defkey2[]={ '1','2','3','4','5','k','m','l' };

int read_config()
{
	char a[256];
	int i, j, v, numkeys;
	FILE *fc=fopen(configFile.c_str(),"r");
	if (!fc) return 0;
	fscanf(fc,"%s\n",a);
	//currently very dumb
	//MESSAGE("%s" &a);
	fscanf(fc,"%d", &numkeys);
	config::keys.resize(0);
	config::kcname.resize(0);
	config::keys.resize(numkeys);
	for (i=0; i<numkeys; i++)
	{
		for (j=0; j<8; j++)
		{
			fscanf(fc, "%d", &v); 
			config::keys[i].push_back(v);
		}
		fscanf(fc,"%s\n",a);
		config::kcname.push_back(a);
	}
	fscanf(fc,"%ld %ld\n",&config::keyselector[0],&config::keyselector[1]);
	fclose(fc);
	if (numkeys<2) return 0;
	return 1;
}

void write_config()
{
	int i,j;
	FILE *fou=fopen(configFile.c_str(),"w");
	if (!fou) return;
	fprintf(fou,":keyboard\n%d\n",config::keys.size());
	for (i=0; i<config::keys.size(); i++)
	{
		for (j=0; j<8; j++)
		{
			fprintf(fou,"%d ",config::keys[i][j]);
		}
		fprintf(fou,"%s\n",config::kcname[i].c_str());
	}
	fprintf(fou,"%ld %ld\n",config::keyselector[0],config::keyselector[1]);
	fclose(fou);
}

void default_config()
{
	int i;
	config::keys.resize(0); // make sure it's clear
	config::keys.resize(2);
	config::kcname.resize(0);
	config::kcname.push_back("Keyboard");
	config::kcname.push_back("Keyb#2");
	for (i=0; i<8; i++) 
	{
		config::keys[0].push_back(defkeys[i]);
		config::keys[1].push_back(defkey2[i]);
	}
	config::keyselector[0]=1;
	config::keyselector[1]=2;
}

void init_config()
{
	int i;
#ifdef _WINDOWS
	configFile="fretscpp.ini"
#else
	configFile=getenv("HOME");
	configFile+="/.config/fretscpp";
	system((string("mkdir -p ")+configFile).c_str());
	configFile+="/fretscpp.ini";
#endif
	if (read_config()) return;
	default_config();
	
}
