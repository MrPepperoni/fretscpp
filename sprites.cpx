/*******************************************************************
(C) 2010 by Radu Stefan
radu124@gmail.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*******************************************************************/  
  
interface

uses includes, utils;

void init_sprites();

class sprite
{
public:
	void load(const char *, int flags=0);
	void setCenter(GLfloat, GLfloat);
	void draw(GLfloat x=0, GLfloat y=0);
	void draw3d();
	void bind();
	int width, height;
	GLuint tex;
	GLfloat scale;
	GLfloat centerx, centery;
};

struct tsprites
{
	sprite logo;
	sprite back;
	sprite guyk;
	sprite neck;
	sprite ball;
	sprite key[5];
	sprite flame;
	sprite hitg1, hitg2;
	sprite hitf1, hitf2;
	sprite glow;
	sprite m2,m3,m4;
	sprite note[4][5];
	sprite noteline;
	static void unbind();
	sprite guitar[8];
} spc;

implementation

void sprite::bind()
{
	glBindTexture(GL_TEXTURE_2D,tex);
}

void tsprites::unbind()
{
	glBindTexture(GL_TEXTURE_2D,NULL);
}

void sprite::load(const char *fname, int flags)
{
	GLfloat cx=0.5f, cy=0.5f;
	ILuint iname;
	ilGenImages(1,&iname);
	ilBindImage(iname);
	ilLoadImage((char *) fname);
	height =ilGetInteger(IL_IMAGE_HEIGHT);
	width  =ilGetInteger(IL_IMAGE_WIDTH);
	if (flags & 1) { height=1; width=1; }
	//tex= ilutGLLoadImage((char *) fname);
	tex=ilutGLBindTexImage();
	
	INFO(SPRITES,"Loading: %s, iname: %d tex:%d size:%dx%d\n" &fname &iname &tex &width &height);
	ilDeleteImages(1,&iname);
	/*
	ilutEnable(ILUT_OPENGL_CONV);
	ILboolean ilutOglBuildMipmaps(ILvoid);
	GLuint ilutGLBindTexImage(ILvoid);
	GLuint ilutOglBindTexImage(ILvoid);
	*/
	//height=200;
	//width=500;
	// original assumed to match 800x600 resolution
	// while our coordinate system is 80x60
	height/=10;
	width/=10;
	centerx=cx*width; 
	centery=cy*height;
}

void sprite::draw(GLfloat x, GLfloat y)
{
	x-=centerx;
	y-=centery;
	glBindTexture(GL_TEXTURE_2D,tex);
	glBegin(GL_QUADS);
	glTexCoord2d(0,1);  glVertex2f(x         ,y);
	glTexCoord2d(0,0);  glVertex2f(x         ,y+height);
	glTexCoord2d(1,0);  glVertex2f(x+width   ,y+height);
	glTexCoord2d(1,1);  glVertex2f(x+width   ,y);
	glEnd();
}

void sprite::draw3d()
{
	glBindTexture(GL_TEXTURE_2D,tex);
	glBegin(GL_TRIANGLE_STRIP);
	glTexCoord2f(0.0, 0.0); glVertex3f(-1, -1, 0);
	glTexCoord2f(1.0, 0.0); glVertex3f( 1, -1, 0);
	glTexCoord2f(0.0, 1.0); glVertex3f(-1, 1, 0);
	glTexCoord2f(1.0, 1.0); glVertex3f( 1, 1, 0);
	glEnd();
	glBindTexture(GL_TEXTURE_2D,NULL);
}

void sprite::setCenter(GLfloat x, GLfloat y)
{
	centerx=x*width;
	centery=y*height;
}

void init_sprites()
{
	int i,j;
	ilInit();
	iluInit();
#ifndef _WINDOWS
	ilutRenderer(ILUT_OPENGL);
#endif
//	ilGenImages(1,&baseiname);
	spc.logo.load("data/logo.png");
	spc.back.load("data/keyboard.png");
	spc.guyk.load("data/pose.png");
	spc.neck.load("data/neck.png");
	spc.ball.load("data/ball2.png",1);
	for (i=0; i<5; i++)
	{
		char a[32];
		sprintf(a,"data/key%d.png",i+1);
		spc.key[i].load(a,1);
		for (j=0; j<4; j++)
		{
			sprintf(a,"data/note%d%d.png",j,i+1);
			spc.note[j][i].load(a,1);			
		}
	}
	spc.hitg1.load("data/hitglow1.png",1);
	spc.hitg2.load("data/hitglow2.png",1);
	spc.hitf1.load("data/hitflames1.png",1);
	spc.hitf2.load("data/hitflames2.png",1);
	spc.glow.load("data/glow.png",1);
	spc.noteline.load("data/note.png",1);
	spc.m2.load("data/2x.png",1);
	spc.m3.load("data/3x.png",1);
	spc.m4.load("data/4x.png",1);
	spc.guitar[0].load("data/guitar1ok.png");
	spc.guitar[1].load("data/guitar1gs.png");
	spc.guitar[2].load("data/guitar2ok.png");
	spc.guitar[3].load("data/guitar2gs.png");
	spc.guitar[4].load("data/guitar3ok.png");
	spc.guitar[5].load("data/guitar3gs.png");
	spc.guitar[6].load("data/guitar4ok.png");
	spc.guitar[7].load("data/guitar4gs.png");
}
